package com.nookdev.uklontest.presentation.view.commentsimport android.os.Bundleimport android.view.Viewimport androidx.core.os.bundleOfimport androidx.lifecycle.ViewModelProviderimport androidx.recyclerview.widget.LinearLayoutManagerimport com.nookdev.uklontest.Rimport com.nookdev.uklontest.di.component.DaggerCommentsFragmentComponentimport com.nookdev.uklontest.domain.model.Postimport com.nookdev.uklontest.presentation.view.MainActivityimport com.nookdev.uklontest.presentation.view.base.BaseFragmentimport com.nookdev.uklontest.presentation.viewmodel.comments.CommentsUiModelimport com.nookdev.uklontest.presentation.viewmodel.comments.CommentsViewModelimport com.nookdev.uklontest.util.injectViewModelimport com.nookdev.uklontest.util.showToastimport kotlinx.android.synthetic.main.fragment_comments.*import javax.inject.Injectclass CommentsFragment : BaseFragment<CommentsViewModel, CommentsUiModel>() {    companion object {        private const val ARG_POST = "post"        fun buildArgs(post: Post): Bundle = bundleOf(ARG_POST to post)    }    @Inject    lateinit var commentsAdapter: CommentsAdapter    private val post: Post        get() = arguments?.getParcelable(ARG_POST) ?: throw IllegalArgumentException("Post is null")    override fun performInjection() {        DaggerCommentsFragmentComponent.builder()            .activityComponent(MainActivity[this].component)            .build()            .inject(this)    }    override fun getLayoutId() = R.layout.fragment_comments    override fun provideViewModel(viewModelFactory: ViewModelProvider.Factory): CommentsViewModel {        return injectViewModel(viewModelFactory)    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        viewModel.refresh(post)        with(rvCommentsList) {            adapter = commentsAdapter            layoutManager = LinearLayoutManager(context)        }        swtrlsComments.setOnRefreshListener {            viewModel.refresh(post)        }        viewModel.refresh(post)    }    override fun onUiModelUpdated(newModel: CommentsUiModel) {        with(newModel) {            swtrlsComments.isRefreshing = false            if (errors.isNotEmpty()) {                errors.forEach { handleError(it) }                return@with            }            commentsAdapter.setData(comments)            tvUserName.text = getString(R.string.username_template, user?.username)            tvUserEmail.text = getString(R.string.name_template, user?.name)            tvUserPhone.text = getString(R.string.phone_template, user?.phone)            tvUserCompanyName.text = getString(R.string.company_name_template, user?.company?.name)        }    }    private fun handleError(e: Throwable) {        showToast(e.message ?: "")    }}